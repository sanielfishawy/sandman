// Generated by CoffeeScript 1.6.3
var Pin, create,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  _this = this;

Pin = (function() {
  function Pin(direction, gpio_num) {
    this.get_val = __bind(this.get_val, this);
    this.set_val = __bind(this.set_val, this);
    this.set_direction = __bind(this.set_direction, this);
    this["export"] = __bind(this["export"], this);
    this.init_pin = __bind(this.init_pin, this);
    if (!(typeof direction === "string" && typeof gpio_num === "number")) {
      throw "Pin constructor requires (direction, gpio_num)";
    }
    this.direction = direction;
    this.gpio_num = gpio_num;
    this.sh = require("/usr/lib/node_modules/execSync");
    this.fs = require("fs");
    this.pin_path = "/sys/class/gpio/gpio" + this.gpio_num;
    this.init_pin();
  }

  Pin.prototype.init_pin = function() {
    this["export"]();
    return this.set_direction();
  };

  Pin.prototype["export"] = function(callback) {
    if (!this.fs.existsSync("/sys/class/gpio/gpio" + this.gpio_num)) {
      return this.sh.run("echo " + this.gpio_num + " > /sys/class/gpio/export");
    }
  };

  Pin.prototype.set_direction = function(d) {
    d || (d = this.direction);
    return this.sh.run("echo " + d + " > " + this.pin_path + "/direction");
  };

  Pin.prototype.set_val = function(v) {
    var cmd;
    cmd = "echo " + v + " > " + this.pin_path + "/value";
    return this.sh.run(cmd);
  };

  Pin.prototype.get_val = function() {};

  return Pin;

})();

create = function(direction, gpio_num) {
  return new Pin(direction, gpio_num);
};

module.exports = {
  create: create
};
