// Generated by CoffeeScript 1.6.3
var ClientSocket, SocketIO;

SocketIO = (function() {
  function SocketIO() {}

  SocketIO.init = function() {
    SocketIO.api = require("./api");
    SocketIO.fs = require("fs");
    SocketIO.http = require("http");
    SocketIO.url = require("url");
    SocketIO.port = 4000;
    SocketIO.app = SocketIO.http.createServer(SocketIO.handle_http_req);
    SocketIO.io = require('socket.io').listen(SocketIO.app);
    SocketIO.io.set('log level', 1);
    SocketIO.app.listen(SocketIO.port);
    return SocketIO.setup_socket_listener();
  };

  SocketIO.setup_socket_listener = function() {
    return SocketIO.io.sockets.on('connection', function(socket) {
      SocketIO.socket = socket;
      socket.emit('connected', {
        port: SocketIO.port
      });
      return socket.on('Api', function(data) {
        return SocketIO.handle_api(data);
      });
    });
  };

  SocketIO.handle_http_req = function(req, res) {
    var img, path, request;
    request = SocketIO.url.parse(req.url, true);
    path = request.pathname;
    console.log("Get for " + path);
    if (path.match(/\/images/)) {
      img = SocketIO.fs.readFileSync("." + path);
      res.writeHead(200, {
        'Content-Type': 'image/gif'
      });
      return res.end(img, 'binary');
    }
  };

  SocketIO.handle_api = function(data) {
    var callback;
    callback = function(cb_params) {
      return SocketIO.transmit_callback(data.callback_id, cb_params);
    };
    data.params.push(callback);
    if (data.name_space.toLowerCase() === "eyes") {
      return ClientSocket.call_api(data.name_space, data.method, data.params, callback);
    } else {
      return SocketIO.api.exec(data.name_space, data.method, data.params);
    }
  };

  SocketIO.transmit_callback = function(callback_id, params) {
    console.log("SocketIO.transmit_callback: called with callback_id = " + callback_id);
    return SocketIO.socket.emit("callback", {
      callback_id: callback_id,
      params: params
    });
  };

  return SocketIO;

}).call(this);

ClientSocket = (function() {
  function ClientSocket() {}

  ClientSocket.init = function() {
    ClientSocket.callbacks = {};
    ClientSocket.net = require('net');
    ClientSocket.port = 12345;
    ClientSocket.client = ClientSocket.net.connect({
      port: ClientSocket.port
    }, ClientSocket.handle_connected);
    return ClientSocket.setup_data_listener();
  };

  ClientSocket.setup_data_listener = function() {
    return ClientSocket.client.on('data', ClientSocket.handle_callback);
  };

  ClientSocket.test_callback = function(params) {
    console.log("SocketIO.test_callback params = ");
    return console.log(param);
  };

  ClientSocket.handle_connected = function(data) {
    return console.log("ClientSocket: connected.");
  };

  ClientSocket.handle_callback = function(str) {
    var r;
    r = JSON.parse(str);
    console.log("ClientSocket.handle_callback: id=" + r.callback_id);
    return ClientSocket.callbacks[r.callback_id] && ClientSocket.callbacks[r.callback_id](r.params);
  };

  ClientSocket.call_api = function(name_space, method, params, callback) {
    var id;
    console.log("ClientSocket.call_api: " + name_space + "." + method + "(" + params + ")");
    console.log(params);
    if (!ClientSocket.client) {
      ClientSocket.init();
    }
    id = (new Date).getTime();
    if (callback) {
      ClientSocket.callbacks[id] = callback;
    }
    return ClientSocket.client.write(JSON.stringify({
      name_space: name_space,
      method: method,
      params: params,
      callback_id: id
    }));
  };

  return ClientSocket;

}).call(this);

module.exports = {
  client_socket: ClientSocket,
  socket_io: SocketIO,
  init: SocketIO.init
};
